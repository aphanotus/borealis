% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create.tps.R
\name{create.tps}
\alias{create.tps}
\title{Convert landmark data from xlsx or csv to tps format}
\usage{
create.tps(input.filename = NULL, output.filename = NULL,
  id.factors = NULL, seperator = "__", include.scale = FALSE,
  invert.scale = FALSE, export.metadata = FALSE,
  specimen.number = NULL, landmark.number = NULL,
  include.header = TRUE)
}
\arguments{
\item{input.filename}{The file name to import.}

\item{output.filename}{The file name to export.}

\item{id.factors}{Metadata column names to be encoded in the specimen IDs.}

\item{seperator}{A character string to separate the terms used in the ID line.}

\item{include.scale}{A logical value indicating whether or not the imported data
includes a column with scale values.}

\item{invert.scale}{A logical value indicating whether to invert the scale value.}

\item{export.metadata}{A logical value indicating whether or not metadata should be
exported to a seperate file.}

\item{specimen.number}{The number of specimens.}

\item{landmark.number}{The number of landmarks for each specimen.}

\item{include.header}{A logical value indicating whether to include a descriptive header in the \code{tps} file.}
}
\description{
Reformats X and Y coordinate positions from a spreadsheet into the \code{tps} ("thin-plate spline")
file format defined by Rohlf (2015).
}
\details{
The first row of the input file must provide column names.
There must be columns headed "x" and "y", although these are not case-sensitive
and can occur in any order.
There must be a column giving specimen IDs, using a name like "ID" or "specimen_IDs"
Any other columns are optional and may be used to encode metadata. The optional parameter
Columns named by \code{id.factors} will be added to the \code{ID=} line
in the resulting \code{tps} file, seperated by the character string in the \code{seperator} parameter.

If \code{include.scale = TRUE}, then you must
have a column headed "scale" to be included as a \code{SCALE=} line for each specimen in
the \code{tps} file.

The scale value can also be inverted, by setting \code{invert.scale = TRUE}.
This may be useful, because \code{geomorph::readland.tps} applies scale values by multiplication.
Typically this is appropriate when scale is recorded as unit distance (e.g. mm) per pixel.
However, if scale is recorded in pixels per unit distance (e.g. pixels/mm)
it will be appropriate to first invert the scaling factor before importing coordinate data.

Each row must include X and Y coordinates for landmarks, in order.
Each specimen should appear with a  consequtively block of rows, with landmarks in the same order.
The number of landmarks must be consistent for all specimens. Specimen metadata must appear on the
first row for each specimen. (That is, on the row for landmark 1.)

By default, the number of specimens and landmarks will be determined by the function. This will be done
by using the number of cells in the specimen ID column with non-whitespace characters. It will be assumed
that all other metadata appears in the same rows, and any information in other rows will be ignored.

The \code{output.filename} may be specified, or by default it will be \code{landmarks.YYMMDD.tps}, where
\code{YYMMDD} is the date.

If \code{export.metadata = TRUE} then a seperate output file will be created that contains only the metadata.
All metadata will be included in this file.

Only the first sheet will be used from \code{xlsx} input files.
}
\examples{
# As an example, an input CSV file might looks like this:
#
# specimen.ID , digitizer , treatment , stage , scale , sex , x   , y
# T330.5      , DRA       , control   , adult , 1.23  , f   , 320 , 453
#             ,           ,           ,       ,       ,     , 303 , 468
#             ,           ,           ,       ,       ,     , 289 , 447
# T330.6      , DRA       , control   , adult , 1.24  , m   , 319 , 490
#             ,           ,           ,       ,       ,     , 300 , 501
#             ,           ,           ,       ,       ,     , 294 , 480

create.tps(
  input.filename = "rawdata.csv",
  output.filename = "output.tps",
  id.factors = c('digitizer','treatment','stage','sex'),
  include.scale = TRUE )

# The file, output.tps, would be created below
#
# LM=3
# 320 453
# 303 468
# 289 447
# ID=T330n5__DRA__control__adult__f
# SCALE=1.23
#
# LM=3
# 319 490
# 300 501
# 294 480
# ID=T330n6__DRA__control__adult__m
# SCALE=1.24

}
\references{
Rohlf, FJ. 2015. The tps series of software. \emph{Hystrix} 26, 9â€“12.
(\href{https://doi.org/10.4404/hystrix-26.1-11264}{Link})
}
